Index: lsproto.c
===================================================================
--- lsproto.c	(revision 16373)
+++ lsproto.c	(working copy)
@@ -202,7 +202,7 @@
 		} else {
 			str = lua_tolstring(L, -1, &sz);
 		}
-		if (sz > args->length)
+		if ((int)sz > args->length)
 			return SPROTO_CB_ERROR;
 		memcpy(args->value, str, sz);
 		lua_pop(L,1);
@@ -482,11 +482,11 @@
 	void * output = lua_touserdata(L, lua_upvalueindex(1));
 	int bytes;
 	int osz = lua_tointeger(L, lua_upvalueindex(2));
-	if (osz < maxsz) {
+	if (osz < (int)maxsz) {
 		output = expand_buffer(L, osz, maxsz);
 	}
 	bytes = sproto_pack(buffer, sz, output, maxsz);
-	if (bytes > maxsz) {
+  if (bytes >(int)maxsz) {
 		return luaL_error(L, "packing error, return size = %d", bytes);
 	}
 	lua_pushlstring(L, output, bytes);
Index: sproto.c
===================================================================
--- sproto.c	(revision 16373)
+++ sproto.c	(working copy)
@@ -41,7 +41,7 @@
 struct pool {
 	struct chunk * header;
 	struct chunk * current;
-	int current_used;
+  size_t current_used;
 };
 
 struct sproto {
@@ -141,7 +141,7 @@
 static int
 struct_field(const uint8_t * stream, size_t sz) {
 	const uint8_t * field;
-	int fn, header, i;
+	size_t fn, header, i;
 	if (sz < SIZEOF_LENGTH)
 		return -1;
 	fn = toword(stream);
@@ -966,7 +966,7 @@
 }
 
 static int
-decode_array_object(sproto_callback cb, struct sproto_arg *args, uint8_t * stream, int sz) {
+decode_array_object(sproto_callback cb, struct sproto_arg *args, uint8_t * stream, size_t sz) {
 	uint32_t hsz;
 	int index = 1;
 	while (sz > 0) {
@@ -1002,7 +1002,7 @@
 decode_array(sproto_callback cb, struct sproto_arg *args, uint8_t * stream) {
 	uint32_t sz = todword(stream);
 	int type = args->type;
-	int i;
+	size_t i;
 	if (sz == 0) {
 		// It's empty array, call cb with index == -1 to create the empty array.
 		args->index = -1;
@@ -1102,7 +1102,7 @@
 			if (size < SIZEOF_LENGTH)
 				return -1;
 			sz = todword(datastream);
-			if (size < sz + SIZEOF_LENGTH)
+			if (size < (int)sz + SIZEOF_LENGTH)
 				return -1;
 			datastream += sz+SIZEOF_LENGTH;
 			size -= sz+SIZEOF_LENGTH;
